# Generated by Django 2.0.1 on 2019-05-04 16:02

from django.db import migrations, transaction
from core.models import *
from core import specs_v3


class Migrator():
    def migrateCostAudit(self):
        subtypes = ['cost_lte_5000', 'cost_gt_5000']
        for index, t in enumerate(subtypes):
            audit = AuditActivityConfig.objects.get(subtype=t)
            audit.subtype = 'cost'
            audit.priority = index + 1
            _, condition, value = t.split('_')
            audit.conditions = [
                {'prop': 'amount', 'condition': condition, 'value': int(value)}
            ]
            audit.save()

    def migrateLoanAudit(self):
        subtypes = ['loan_lte_5000', 'loan_gt_5000']
        for index, t in enumerate(subtypes):
            audit = AuditActivityConfig.objects.get(subtype=t)
            audit.subtype = 'loan'
            audit.priority = index + 1
            _, condition, value = t.split('_')
            audit.conditions = [
                {'prop': 'amount', 'condition': condition, 'value': int(value)}
            ]
            audit.save()

    def migrateTravelAudit(self):
        subtypes = ['travel_lte_5000', 'travel_gt_5000']
        for index, t in enumerate(subtypes):
            audit = AuditActivityConfig.objects.get(subtype=t)
            audit.subtype = 'travel'
            audit.priority = index + 1
            _, condition, value = t.split('_')
            audit.conditions = [
                {'prop': 'amount', 'condition': condition, 'value': int(value)}
            ]
            audit.save()

    def migrateMoneyAudit(self):
        audit = AuditActivityConfig.objects.get(subtype='money_caigou_or_other_lte_5k')
        audit.conditions = [
            {'prop': 'amount', 'condition': 'lte', 'value': 5000},
            {'prop': 'info.type', 'condition': 'eq', 'value': ['caigou', 'other']}
        ]
        audit.priority = 1
        audit.subtype = 'money'
        audit.save()

        audit = AuditActivityConfig.objects.get(subtype='money_caigou_or_other')
        audit.conditions = [
            {'prop': 'info.type', 'condition': 'eq', 'value': ['caigou', 'other']}
        ]
        audit.priority = 2
        audit.subtype = 'money'
        audit.save()

        audit = AuditActivityConfig.objects.get(subtype='money_lte_50k')
        audit.priority = 3
        audit.conditions = [
            {'prop': 'amount', 'condition': 'lte', 'value': 50 * 1000}
        ]
        audit.subtype = 'money'
        audit.save()

        audit = AuditActivityConfig.objects.get(subtype='money_gt_50k')
        audit.priority = 4
        audit.conditions = [
            {'prop': 'amount', 'condition': 'gt', 'value': 50 * 1000}
        ]
        audit.subtype = 'money'
        audit.save()

        audit = AuditActivityConfig.objects.filter(subtype='money_transfer').first()
        if audit is not None:
            audit.subtype = 'money'
            audit.priority = 5
            audit.conditions = [
                {'prop': 'info.type', 'condition': 'eq', 'value': ['transfer']}
            ]
            audit.save()

        audit = AuditActivityConfig.objects.filter(subtype='money_no_risk').first()
        if audit is not None:
            audit.subtype = 'money'
            audit.priority = 6
            audit.conditions = [
                {'prop': 'info.type', 'condition': 'eq', 'value': ['biz']},
                {'prop': 'info.risk', 'condition': 'eq', 'value': False},
            ]
            audit.save()

        audit = AuditActivityConfig.objects.filter(subtype='money_risk').first()
        if audit is not None:
            audit.subtype = 'money'
            audit.priority = 7
            audit.conditions = [
                {'prop': 'info.type', 'condition': 'eq', 'value': ['biz']},
                {'prop': 'info.risk', 'condition': 'eq', 'value': True},
            ]
            audit.save()

    def migratePurchaseAudit(self):
        subtypes = ['purchase_lte_5000', 'purchase_gt_5000']
        for index, t in enumerate(subtypes):
            audit = AuditActivityConfig.objects.get(subtype=t)
            audit.subtype = 'purchase'
            audit.priority = index + 1
            _, condition, value = t.split('_')
            audit.conditions = [
                {'prop': 'amount', 'condition': condition, 'value': int(value)}
            ]
            audit.save()

    def migrateOpenAccountAudit(self):
        audit = AuditActivityConfig.objects.get(subtype='open_account')
        audit.priority = 0
        audit.fallback = True
        audit.save()

    def migrateBizContractAudit(self):
        AuditActivityConfig.objects \
            .filter(subtype='biz_contract') \
            .update(subtype='biz_contract_legacy')
        specs_v3.createAuditConfig('law.biz:fin.fin_accountant->dichan.law_mgr->_.owner', fallback=True)

        audit = AuditActivityConfig.objects.get(subtype='biz_contract_no_risk')
        audit.subtype = 'biz'
        audit.priority = 1
        audit.conditions = [
            {'prop': 'base.risk', 'condition': 'eq', 'value': True}
        ]
        audit.save()

    def migrateFnContractAudit(self):
        audit = AuditActivityConfig.objects.get(subtype='fn_contract')
        audit.subtype = 'fn'
        audit.priority = 0
        audit.fallback = True
        audit.save()

        audit = AuditActivityConfig.objects.get(subtype='fn_contract_zero')
        audit.subtype = 'fn'
        audit.conditions = [
            {'prop': 'amount', 'condition': 'eq', 'value': 0}
        ]
        audit.priority = 1
        audit.fallback = False
        audit.save()

    def migrate(self):
        # migrate v1 audit configs to v3

        with transaction.atomic():
            # fin audits
            self.migrateCostAudit()
            self.migrateLoanAudit()
            self.migrateMoneyAudit()
            self.migratePurchaseAudit()
            self.migrateTravelAudit()
            self.migrateOpenAccountAudit()

            # law audits
            self.migrateBizContractAudit()
            self.migrateFnContractAudit()


def upgradeToV3(apps, schema_editor):
    m = Migrator()
    m.migrate()


def prepareV3AuditCofigurationData(apps, schema_editor):
    Configuration.objects.create(
        key='audits',
        value={
            'categories': ['fin', 'law', 'hr'],
            'audits': [
                {'subtype': 'cost', 'name': '费用报销', 'category': 'fin', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'loan', 'name': '借款申请', 'category': 'fin', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'money', 'name': '用款申请', 'category': 'fin', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'open_account', 'name': '银行开户', 'category': 'fin', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'travel', 'name': '差旅报销', 'category': 'fin', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'rongzitikuan', 'name': '融资提款', 'category': 'law', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},

                {'subtype': 'biz', 'name': '业务合同会签', 'category': 'law', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'fn', 'name': '职能合同会签', 'category': 'law', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},

                {'subtype': 'zhuanzheng', 'name': '员工转正评定', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'transfer', 'name': '内部调动', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'leave', 'name': '离职申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'leave_handover', 'name': '离职交接', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'yongren', 'name': '用人需求', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},

                {'subtype': 'qingjia', 'name': '请假申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'chuchai', 'name': '出差申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'kaoqin_yichang', 'name': '考勤异常申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},

                {'subtype': 'yinjian_kezhi', 'name': '印鉴刻制申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'dangan_jiechu', 'name': '业务档案原件借出', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},

                {'subtype': 'zichan_baofei', 'name': '固定资产报损（废）', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'zichan_caigou', 'name': '固定资产购置申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
                {'subtype': 'zizhi_shiyong', 'name': '资质使用申请', 'category': 'hr', 'hasTask': True, 'enabled': True,
                 'updated_at': timezone.now()},
            ]
        }
    )

    # 内部调动默认审批流程
    specs_v3.createAuditConfig(spec='hr.yongren:_.owner->hr.owner->root.ceo', fallback=True)
    specs_v3.createAuditConfig(spec='hr.zhuanzheng:_.owner->hr.owner->root.ceo', fallback=True)
    specs_v3.createAuditConfig(spec='hr.transfer:_.owner->hr.owner->root.ceo', fallback=True)
    specs_v3.createAuditConfig(spec='hr.leave:_.owner->hr.owner->root.ceo', fallback=True)
    specs_v3.createAuditConfig(spec='hr.leave_handover:_.owner->fin.owner->hr.owner->root.ceo', fallback=True)
    specs_v3.createAuditConfig(spec='hr.qingjia:_.owner->hr.owner', fallback=True)
    specs_v3.createAuditConfig(spec='hr.chuchai:_.owner->hr.owner', fallback=True)
    specs_v3.createAuditConfig(spec='hr.kaoqin_yichang:_.owner->hr.owner', fallback=True)

    AuditActivityConfig.objects \
        .filter(subtype='rongzitikuan') \
        .update(subtype='rongzitikuan_legacy')
    specs_v3.createAuditConfig(spec='law.rongzitikuan:jinrong.owner->fin.fin_accountant->fin.owner->root.ceo',
                               fallback=True)


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0026_auto_20190504_1559'),
    ]

    operations = [
        migrations.RunPython(upgradeToV3),
        migrations.RunPython(prepareV3AuditCofigurationData)
    ]
